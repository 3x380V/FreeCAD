from Base.Metadata import export
from Base.PyObjectBase import PyObjectBase

@export(
    Father="PyObjectBase",
    PythonName="Part.BRepOffsetAPI.MakeOffset",
    Twin="BRepOffsetAPI_MakeOffsetFix",
    TwinPointer="BRepOffsetAPI_MakeOffsetFix",
    Include="Mod/Part/App/BRepOffsetAPI_MakeOffsetFix.h",
    FatherInclude="Base/PyObjectBase.h",
    Constructor=True,
    Delete=True
)
class MakeOffset(PyObjectBase):
    """
    Describes algorithms for offsetting wires

    Author: Werner Mayer (wmayer[at]users.sourceforge.net)
    Licence: LGPL
    """

    def init(self, **kwargs) -> None:
        """
        Initializes this algorithm to construct parallels to the spine.
        Join defines the type of parallel generated by the
        salient vertices of the spine.
        The default type is GeomAbs_Arc where the vertices generate
        sections of a circle.

        If join type is GeomAbs_Intersection, the edges that
        intersect in a salient vertex generate the edges
        prolonged until intersection.
        """

    def addWire(self, spine: Wire) -> None:
        """
        Adds a wire.
        """

    def build(self) -> None:
        """
        Builds the resulting shape.
        """

#    def perform(self, Offset: float, Alt: float = 0.0) -> None:
    def perform(self, **kwargs) -> None:
        """
        Computes a parallel to the spine at distance Offset and
        at an altitude Alt from the plane of the spine in relation
        to the normal to the spine.
        """

    def isDone(self) -> bool:
        """
        Tests whether computation of the offset has been completed.
        """

    def shape(self) -> TopoShape:
        """
        Returns the resulting shape.
        """
